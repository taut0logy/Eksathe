name: CI/CD Pipeline

on:
  push:
    branches:
      - production
  pull_request:
    branches:
      - production

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/eksathe-app:latest \
            -f serverconfig/app.Dockerfile .

          docker build -t \
            ${{ secrets.DOCKER_USERNAME }}/eksathe-server:latest \
            -f serverconfig/server.Dockerfile .

      - name: Push images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/eksathe-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/eksathe-server:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.CLOUD_SERVER_IP }}
          username: ${{ secrets.CLOUD_SERVER_USER }}
          password: ${{ secrets.CLOUD_SERVER_PASSWORD }}
          script: |
            # Create Docker network if it doesn't exist
            docker network create eksathe-network || true

            # Stop and remove existing containers
            docker stop eksathe-db || true
            docker rm eksathe-db || true
            docker stop eksathe-app || true
            docker rm eksathe-app || true

            # Pull latest images
            docker pull mysql:8
            docker pull ${{ secrets.DOCKER_USERNAME }}/eksathe-app:latest

            # Remove dangling images
            docker image prune -f || true

            # Run MySQL container
            docker run -d \
              --name eksathe-db \
              -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
              -e MYSQL_DATABASE=eksathe \
              -e MYSQL_USER=eksathe \
              -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -v db_data:/var/lib/mysql \
              mysql:8

            # Run app container
            docker run -d \
              --name eksathe-app \
              -e APP_ENV=production \
              -e APP_DEBUG=true \
              -e APP_URL=${{ secrets.APP_URL }} \
              -e DB_HOST=eksathe-db \
              -e DB_PORT=3306 \
              -e DB_DATABASE=eksathe \
              -e DB_USERNAME=eksathe \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              --network eksathe-network \
              ${{ secrets.DOCKER_USERNAME }}/eksathe-app:latest

            # Remove dangling images
            docker image prune -f || true

            # Remove dangling volumes
            docker volume prune -f || true

            # Wait for the Laravel container to be ready (use a better approach for waiting)
            echo "Waiting for the Laravel container to be ready..."
            sleep 10

            # Generate App Key
            echo "Generating App Key..."
            docker exec eksathe-app php artisan key:generate

            # Link Storage
            echo "Linking Storage..."
            docker exec eksathe-app php artisan storage:link

            # Optimize
            echo "Optimizing..."
            docker exec eksathe-app php artisan optimize

            # Wait for the MySQL container to be ready
            echo "Waiting for MySQL to be ready..."
            until docker exec eksathe-db mysqladmin ping --silent; do
              echo "MySQL is not ready yet..."
              sleep 3
            done

            # Run Migrations
            echo "Running Migrations..."
            docker exec eksathe-app php artisan migrate:fresh --seed

            # Clear Cache
            echo "Clearing Cache..."
            docker exec eksathe-app php artisan cache:clear
            docker exec eksathe-app php artisan config:clear
            docker exec eksathe-app php artisan route:clear

            # Check nginx configuration
            echo "Checking nginx configuration..."
            docker exec eksathe-app nginx -t

            # Check Container log
            echo "Checking Container Logs..."
            docker logs eksathe-app

            # Check nginx log
            echo "Checking Nginx error Logs..."
            docker exec eksathe-app tail -f /var/log/nginx/error.log

            # Check reverb logs
            echo "Checking Reverb Logs..."
            docker exec eksathe-app tail -f /var/log/nginx/reverb.err.log

            # Check error logs
            echo "Checking Error Logs..."
            docker exec eksathe-app tail -f storage/logs/laravel.log
